*isPrime?
import java.io.*;
import  java.util.*;
class UserMainCode
{
 public int isPrime(int input1){
  int count=0;
 for(int i=2;i<=Math.sqrt(input1);i++)
{
 if(input1%i==0)
     count++;
}
if(count==0)
 return 2;
 else
return 1;
 }
}

*FACTORIAL of a number
import java.io.*;
import  java.util.*;
class UserMainCode
{
 public int nFactorial(int input1){
  int fact=1;
for(int i=1;i<=input1;i++)
 {
fact=fact*i;
 }
return fact;
 }
}

*nth Fibonacci: Write a function to return the nth number in the Fibonacci series.
import java.io.*;
import  java.util.*;
class UserMainCode
{
 public long nthFibonacci(int input1){
 if(input1==1)
 return 0;
if(input1==2)
 return 1;
 else
 return nthFibonacci(input1-1)+nthFibonacci(input1-2);
 }
}

*Nth Prime
import java.io.*;
import  java.util.*;
class UserMainCode
{
 public int NthPrime(int input1){
       int count=0,pcount=0,i;
  for(i=2;i<=100000;i++)
  {
   count=0;
   for(int j=2;j<=Math.sqrt(i);j++)
   {
    if(i%j==0)
     count++;
   }
   if(count==0)
    pcount++;
   if(pcount==input1)
    break;
  }
  return i; 
}}

*digitSum : sum of all digits in N
import java.io.*;
import  java.util.*;
class UserMainCode
{
                public int digitSum(int input1){
                                int neg=input1;
                                if(input1<0)
                                {
                                                input1*=-1;
                                }
                                int len=Integer.toString(input1).length();
                                if(len==1)
                                {
                                                if(neg<0)
                                                return input1*-1;
                                                else
                                                                return input1;
                                }
                                else
                                {
                                                int sum=0;
                                while(input1!=0)
                                {
                                                int rem=input1%10;
                                                sum+=rem;
                                                input1/=10;
                                }
                                                if(neg<0)
                                                                return digitSum(sum*-1);
                                                else
                                                                return digitSum(sum);
                }}
}



*Even Digits' Sum:
import java.io.*;
import  java.util.*;
class UserMainCode
{
public int EvenDigitsSum(int inpu1){
int sum=0;
while(input1!=0)
{
int n=input1%10;
if(n%2==0)
sum+=n;
input1/=10; 
}
return sum;
}

*digitSum odd: sum of odd digits in N
import java.io.*;
import  java.util.*;
class UserMainCode
{
public int OddDigitsSum(int inpu1){
int sum=0;
while(input1!=0)
{
int n=input1%10;
if(n%2!=0)
sum+=n;
input1/=10; 
}
return sum;
}


*digitSum opt: sum of even or odd digits
import java.io.*;
import  java.util.*;
class UserMainCode
{
public int OddDigitsSum(int input1,String input2){
      int sum=0;
        if(input2.equals("even"))
        {
while(input1!=0)
    {
 int n=input1%10;
 if(n%2==0)
    sum+=n;
  input1/=10; 
    }
        }
        else
        {
    while(input1!=0)
    {
     int n=input1%10;
   if(n%2!=0)
    sum+=n;
  input1/=10; 
    }
        }
       return sum;
    }
}



